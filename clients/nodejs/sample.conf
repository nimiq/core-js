{
    // Configure hostname/IP address to announce to the network.
    // If the protocol is "wss", this must be a FQDN pointing to this node.
    // Possible values: any fully-qualified domain name or IP address (latter only for protocol "ws").
    host: "my.domain",

    // Specifies which port to listen on for connections.
    // Possible values: any valid port number
    // Default: 8443.
    //port: 8443,

    // Certificate file and private key file to use for the TLS secured server.
    tls: {
        cert: "./my.domain.cer",
        key: "./my.domain.key"
    },

    // Configure the protocol to be used. Options are:
    // - "wss": Requires host, port, and TLS certificate to be set.
    // - "ws": Only requires host (can be an IP address) and port to be set.
    // - "dumb": Discouraged as other nodes might set limits on the number of dumb connections.
    //           Other nodes will not be able to connect to this node, but you may connect to others.
    // Possible values: "wss", "ws", "dumb"
    // Default: "wss"
    //protocol: "wss",

    // Specify the type of node to run.
    // Possible values: "full", "light", "nano", "pico"
    // Default: "full"
    //type: "full",

    // Run in volatile mode: do not write consensus state to disk.
    // Possible values: "no", "yes"
    // Default: "no"
    //volatile: "yes",

    // Specify the network to connect to.
    // Possible values: "main", "test", "dev"
    // Default: "main"
    //network: "test",

    // Run in passive mode: do not connect to other peers and wait for them to connect to you.
    // Possible values: "no", "yes"
    // Default: "no"
    //passive: "yes",

    // Print statistics like mining hashrate, current account balance and mempool size
    // Possible values: the time interval (in seconds) between statistics, or 0 to disable
    // Default: 0
    //statistics: 60,

    // Configure the miner on this node.
    miner: {
        // Activate mining on this node.
        // Possible values: "no", "yes"
        // Default: "no"
        //enabled: "yes",

        // Number of threads to use for mining. Set to "auto" to automatically use number of cores
        // of the device's processor.
        // Possible values: "auto", any number of threads
        // Default: "auto"
        //threads: 1,

        //throttleAfter: Infinity,
        //throttleWait: 100,

        //extraData: "miner name"
    },

    // Configure pool mining on this node.
    poolMining: {
        // Mine as part of a mining pool
        // Possible values: "no", "yes"
        // Default: "no"
        //enabled: "yes",

        // Hostname of the mining pool server
        // Possible values: any fully-qualified domain name.
        // Default: none
        //host: "pool.domain",

        // Port of the mining pool server
        // Possible values: any valid port number
        // Default: none
        //port: 8444,

        // Mining Pool Mode. In Smart Mode, the miner actively syncs with the network.
        // Possible values: "smart", "nano"
        // Default: "smart"
        //mode: "smart",

        // Optional data including stats about the device.
        // The format of this JSON object is defined by the pool operator.
        // Possible values: a valid JSON object
        // Default: none
        //deviceData: { deviceGroup: 'foobar' },
    },

    // Configure the JSON-RPC server.
    rpcServer: {
        // Start the JSON-RPC server.
        // Possible values: "no", "yes"
        // Default: "no"
        //enabled: "yes",

        // TCP-Port to use to create a listening socket for the JSON-RPC server.
        // Possible values: any valid port number
        // Default: 8648
        //port: 8648,

        // Allow Cross-Origin access to the JSON-RPC server from the specified origins. Use this option with caution.
        // Default: []
        //corsdomain: [],

        // Allow access from remote hosts (ip address) or subnet (network/CIDR). Use this option with caution.
        // Default: []
        //allowip: ["192.168.0.0/24"],

        // Allow only the RPC methods listed here. All methods are allowed if this is empty.
        // Default: []
        //methods: ["getBlockByNumber", "peerCount"],

        // Declare a username and password required to access the JSON-RPC server.
        // Default: none
        //username: "super",
        // Default: none
        //password: "secret",
    },

    // Configure the node UI
    uiServer: {
        // Enable the node UI.
        // Possible values: "no", "yes"
        // Default: "no"
        //enabled: "yes",

        // TCP-Port to use to create a listening socket for the UI server.
        // The UI will be reachable at localhost:port, e.g. localhost:8650
        // Possible values: any valid port number
        // Default: 8650
        //port: 8650,
    },

    // Configure Prometheus-compatible metrics server.
    metricsServer: {
        // Start the metrics server.
        // Possible values: "no", "yes"
        // Default: "no"
        //enabled: "yes",

        // TCP-Port to use to create a listening socket for the metrics server.
        // Possible values: any valid port number
        // Default: 8649
        //port: 8649,

        // Declare a password required to access the metrics server.
        // Default: none
        //password: "secret",
    },

    // Specify the wallet to use.
    wallet: {
        // Use a wallet initialized from a wallet seed.
        // Default: none
        //seed: "seed",

        // Use a wallet by it's address. The specified wallet cannot be used to sign transactions.
        // Default: none
        //address: "NQ42 XX...",
    },

    // Configure support to run this node behind a reverse proxy.
    reverseProxy: {
        // Enable reverse proxy support.
        // Possible values: "no", "yes"
        // Default "no"
        //enabled: "yes",

        // TCP-Port where the reverse proxy is listening.
        // Possible values: any valid port number
        // Default: 8444
        //port: 8443,

        // IP addresses of the reverse proxy that this node will "see" (i.e. the value of ws._socket.remoteAddress)
        // Possible values: any valid IP addresses
        // Default: ["::ffff:127.0.0.1"]
        //addresses: ["::ffff:192.168.10.40"],

        // HTTP header where the reverse proxy will send the original IP address of the connecting client
        // Possible values: any valid HTTP header name
        // Default: "x-forwarded-for"
        //header: "x-forwarded-for"

        // Set termination of SSL on the reverse proxy.
        // Default: false
        //terminatesSsl: true,
    },

    // Configure log output. All output will go to STDOUT.
    log: {
        // Configure global log level.
        // Possible values: "trace", "verbose", "debug", "info", "warning", "error", "assert"
        // Default: "info"
        //level: "verbose",

        // Define specific log levels for tags
        // Default: none
        //tags: {"BaseConsensus": "debug"},
    },

    // Configure additional seed peers.
    seedPeers: [
        // Details of additional seed node.
        // - host: the hostname of the websocket server to connect to.
        // - port: the port that the nimiq node runs on.
        // - publicKey (optional): the public part of the peer key of this seed node. Should always be set if the node
        //                         is accessed via the internet.
        // - protocol (optional): the protocol to use for connecting to the seed node. Possible values: ws or wss.
        //{host: 'new-seed.nimiq.com', port: 8080, publicKey: 'e65e39616662f2c16d62dc08915e5a1d104619db8c2b9cf9b389f96c8dce9837'},
        //{host: 'nimiq-seed.company-network.int', port: 8080},
    ],

    // Override JavaScript constants.
    // WARNING: This can seriously break things, use with care!
    constantOverrides: {
    },
}
